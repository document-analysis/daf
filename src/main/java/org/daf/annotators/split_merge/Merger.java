package org.daf.annotators.split_merge;

import org.daf.common.DafAPI;
import org.daf.data_structures.Document;

/**
 * A merger processes a base-document, provided in its constructor, along with additional documents, provided in
 * the {@link #accumulate(Document)} method. The processing ends in the method {@link #conclude()}.
 * 
 * <p>
 * The typical use-case of {@link Merger} is in a split-and-merge flow, implemented in {@link SplitMergeAnnotator}.
 * A {@link Splitter} generates sequence of documents from the base-document. Each of those new documents is annotated by
 * some annotators. Then, the base-document, along with all the documents generated by the {@link Splitter} are provided
 * to the {@link Merger}.
 * 
 * <p>
 * Note that a {@link Merger} can process only one base-document, which is provided in the constructor.
 * Thus, conventionally, a {@link Merger} will be constructed by a {@link MergerFactory}. A {@link MergerFactory} would
 * construct a new {@link Merger} instance for each document.
 * 
 *
 * <p>
 * Date: 31 May 2017
 * @author Asher Stern
 *
 */
@DafAPI
public abstract class Merger
{
	@DafAPI
	public Merger(Document document)
	{
		super();
		this.document = document;
	}
	
	@DafAPI
	public abstract void accumulate(Document document);
	
	@DafAPI
	public abstract void conclude();

	@DafAPI
	protected final Document document;
}
