package org.dap.annotators.split_merge;

import java.util.Iterator;

import org.dap.annotators.AggregateAnnotator;
import org.dap.annotators.Annotator;
import org.dap.common.DapAPI;
import org.dap.data_structures.Document;

/**
 * Implements a split-and-merge flow.
 * <br>
 * The flow is as follows:
 * <ol>
 * <li>The document (denoted henceforth as "base-document") is first given to the {@link Splitter}, which generates new documents from that document.</li>
 * <li>Each of those new documents is then annotated by the given {@link Annotator}
 * (which, of course, might be an {@link AggregateAnnotator}).</li>
 * <li>Then, a new {@link Merger} is constructed for the base-document. All the documents generated by the {@link Splitter} are
 * being accumulated by the {@link Merger}: they are passed to its {@link Merger#accumulate(Document)} method.</li>
 * <li>Finally, the {@link Merger#conclude()} method is called, which completes the processing.</li>
 * </ol>
 *
 * <p>
 * Date: 31 May 2017
 * @author Asher Stern
 *
 */
@DapAPI
public class SplitMergeAnnotator extends Annotator
{
	/**
	 * Constructor with all the components needed for the split-and-merge flow.
	 * @param splitter generates new documents for each document provided to the {@link #annotate(Document)} method.
	 * @param annotator annotates each of the new documents generated by the {@link Splitter}.
	 * @param mergeFactory collects the original document ("base-document") and all the documents generated by the {@link Splitter}.
	 */
	@DapAPI
	public SplitMergeAnnotator(Splitter splitter, Annotator annotator, MergerFactory mergeFactory)
	{
		super();
		this.splitter = splitter;
		this.annotator = annotator;
		this.mergeFactory = mergeFactory;
	}
	
	/**
	 * Runs the split-and-merge flow on the given document, as described in the main comment of this class.
	 * @param document the given document
	 */
	@DapAPI
	@Override
	public void annotate(Document document)
	{
		Merger merger = mergeFactory.createMerger(document);
		Iterator<Document> iterator = splitter.split(document);
		while (iterator.hasNext())
		{
			Document splitDocument = iterator.next();
			annotator.annotate(splitDocument);
			merger.accumulate(splitDocument);
		}
		merger.conclude();
	}
	
	
	private final Splitter splitter;
	private final Annotator annotator;
	private final MergerFactory mergeFactory;
}
